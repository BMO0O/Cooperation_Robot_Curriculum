파이썬 객체생성 - 생성자
	super() - 슈퍼생성자, 부모클래스 의미 : super().__init__()부모클래스로 객체를 만들어 달라는 뜻 

메모리영역 4가지
code 영역 - 객체에 선언되지 않은 def(함수)
static - 모든 영역들의 실행 순서 등 작업 지역에 대한 내용
data - class형태로 만들어지는 field, value, class관련된 내용의 class method 기록
##3가지 영역은 프로그래밍 동작 이전에 결정됨, 동작중 유지됨
heap - 

알고리즘 
##정렬## -사용하기 위해 정렬함
	-컴퓨터: 주기억장치(사용영역): 메모리 / 보조기억장치(저장영역):하드
	-외부정렬방식 ; 병합방식 사용
	-기수정령 :입력할 데이터의 개수, 어쩌고 저쩌고, 선입선출구조, 버킷을 큐로서 만들어준다
		1의 자리수 부터 들어옴

##검색## - 내부 :메모리 내 외부:보조기억장치에서 수행
	-검색에 대한 대상, 키값 비교 (내부), 계산검색방법ㅂ(계수적 방법 사용
	-순차검색: 정렬이 되어있지 않는 구조에서 가능
	-색인순차검색: 범주에 따라 달라진다. 
	-도서관 검색 = 해싱 = 검색하면 키값이 나옴 ->키를 가지고 도서를 가지러 가는 과정이 해싱임
	#해싱#
	--충돌: set, dictionary에서 키값 유일, 분명 다른 키값인데 해시함수에서 결과가 같이 나온다..? --> 충돌, 같은 위치에 같이 들어가려고 하는것
	--동거자: 서로다른키값이지만 같이 있겠다. 
	--오버플로우: 버킷이 수용할 수 있는 공간을 넘어섬
	--키값 밀도: 사용가능한 키값중 실제 사용하는 키의 개수; 
	--적재 밀도: 
	--해싱함수: 다양한 형태가 존재, 

파이썬에선 마이너스 인덱스 존재!! 0이 첫번째라면 -1이면 반대개념 맨 마지막위치라는 뜻!
ex)stack.pop(-1) --> 맨 마지막 거 pop하겠다는 의미!

파이썬에선 Null사용 x None을 사용하자!


통신 에코소스 만들어서 보내기

####lambda####
lambda = 한번만 쓰는 함수 따라서 이름이 없다
weights.sort(key=lambda t: t[2])  ==> def __(t): return t[2]

정렬시 퀵이나 쉘 정렬이 주로 쓰임-->가장 빠르다