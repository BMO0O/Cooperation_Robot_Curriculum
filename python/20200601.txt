2020.06.01 
파이썬의 중괄호는 dictionary 에서만 사용! 다른것은 들여쓰기로 구분한다.

함수: return 함수를 종료하겠다
파이썬은 overloading이라는 개념이 없다. 
전부다 객체이다
인스턴스 맴버 < 클래스로 만들어낸 맴
class a:
    n = "" #static member 본 클래스로 만들어진 모든 클래스가 공유
    def __init__(self):

self = 인스턴스 표현
cls = class 자체를 표현하는 것
input은 무조건 str으로만 받는다

공개/ 비공개 
	공개: 클래스 밖에서 접근 가능(public) / 비공개: 클래스 안에서만 접근 가능(private)
 	
상속
	객체 지향 <- 유전적상속
	다중 상속 존재 : 여러 부모 클래스의 속성을 가져올 수 있다.
	비공개 요소는 상속이 되지 않는다
	인스턴스 요소를 가지고 있는것에는 접근하거나 상속받을 수 없다.
class A:
    n = 0
    __x = 0
    def __init__(self):
        self.m = 0
        self.__y = 0
    def __method(self):
        print("메소드 사용 ") #이것들은 인스턴스를 부여해주어야만 존재
    def get(self):
        a = self.__y
        return a
    def get_M(self):
        self.__method()
    
class B(A):
    def __init__(self):
        self.j = 0
        
a = A()         
b = B() #B는 __y가 없다 
b.n
b.get()


다형성 
	상속으로 인해 생기는 성격
	overloading, overwriting 이지만 파이썬에서는 overloading 이라는 개념이 없다(같은 이름으로 만들어지는 변수 등)

추상 클래스(abstract class)
	
자료구조
	노우!noooooooooo! 과제 싫어!!!!!!!!!!!!!!!!
	사용하기 위해 데이터를 담는것
	파일 구조 : 클래스, 구조체
	자료의 표현
		- 수치자료 : 두가지 형식: 10진수, 2진수 why? 데이터와 컴퓨터 특성때문 
		10진수 표현 * 존 영역으로 만들어진 표기법 : 존영역이 먼디; 부호비트랑 비슷하대 4비트 사용할때 8비트 씀
			   * 팩 형식: 4비트 필요하면 4비트만 사용, 최하위 4비트에 부호를 표시 자릿수를 두배로 먹지 않고 추가로 4비트만 더 먹음
		데이터 정수값 표기시 음수와 양수 표기
			- 정수자료형에 대해 표기를 할때, 3가지 형태 존재 1. 부호비트 2. 1의 보수 형식 3. 2의 보수 형식
			2. 1의 보수: 음수의 표현에서 데이터 뒤집기(비트반전) 
			3. 2의 보수: 
	고정 소수점 표현
	부동 소수점 
		전체 자리를 소수로 나타냄 + 밑수와 지수 구분 

	요즘은 아스키코드안쓰고 유니코드 사용함 - 유니코드는 16비트, 나라별로 차이가 있다
	논리자료:

소프트웨어 생명주기!
	-어떻게 관리하는지가 생명주기를 좌지우지한다.
	-요즘 구좌화 프로그래밍에서 모듈러 프로그래밍으로 옮기는 추세
	
알고리즘
	-알고리즘의 조건  5가지
	-반복문 2번 중첩 이상은 못쓴다고 생각해라! (두번만 해도 n^2의 시간이 걸림)
	
	 
자료구조 ##리스트##
	-순차리스트, linked list 가 있다
	-논리적 구조 : 생각하는 것 / 물리적구조 : 실제적 메모리공간에 어떻게 배치되는가
	순차 자료구조: - 삽입/삭제 연산 후 유지하기 힘들어짐
	-연결자료구조: 논리적순서와 물리적인 순서가 일치하지 않는 자료구조
		       번호표를 뽑고 대기하고 있는 형태와 비슷(물리적으로 줄을 선것은 아니지만 줄을 선 상태)\
	         	       data-link : node 라고 부름 
	-연결리스트 100 data-link -- 200 data-link --300 data-link
	-이중연결리스트 llink-data-rlink 방향성을 양방향으로 준다(방향성이 두개 있는 단순연결리스트이다)
	
	##스택##
	-first in last out

	##큐##
	-선입선출구조

	##트리##
	-ex) 가계도
	-node를 통해 연결시켜줌 / 구조로 보면 단순연결리스트이다.
	-이중트리의 순회(traversal) : 노드마다 3가지 기능 1. searching 2. move to left 3. move to right
	-전위순회과정 : searching - move left - searching - move left -searching - can't move - 위로 올라가서 다시 move to right ....
		root가 제일 앞에 위치하게 되는 순회과정
	-중위순회과정 : root가 중간위 위치하게 되는 순회과정
		제일 첫번째 node는 제일 왼쪽에 위치하는 node이고 제일 마지막은 오른쪽 끝에 있는 node

	